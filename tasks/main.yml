---
- name: Remove Proxmox Subcription Popup
  replace:
    path: "/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js"
    regexp: 'res[\s\n]*\.data\.status\.toLowerCase\(\) !== .active.'
    replace: "false"
    backup: yes
  notify: restart-pveproxy
  when: "disable_subscription_popup | bool"

- name: Disable PVE Enterprise Repository
  file:
    path: /etc/apt/sources.list.d/pve-enterprise.list
    state: absent
  when: "disable_enterprise_repo | bool"

- name: Enable PVE no Subcription Repository
  block:
    - name: Add GPG Key
      get_url:
        url: https://enterprise.proxmox.com/debian/proxmox-release-{{ ansible_distribution_release }}.gpg
        dest: /etc/apt/trusted.gpg.d/proxmox-release-{{ ansible_distribution_release }}.gpg
    - name: Adding Repo
      apt_repository:
        repo: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
        filename: pve-no-subscription
        state: present
  when: "enable_no_subscription_repo | bool"

- name: Perform PVE Upgrades
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: dist
    autoremove: true
  when: "system_upgrades | bool"
  retries: 2
  register: _system_upgrade
  until: _system_upgrade is succeeded

- name: LLDP Tool Setup
  block:
    - name: Install LLDP
      ansible.builtin.package:
        name:
          - lldpd
        state: present

    - name: Start and Enable LLDP Daemon
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: lldpd.service
  when: "tools_lldp | bool"

- name: Cockpit ZFS Tools Setup
  block:
    - name: Install Cockpit and required packages
      ansible.builtin.package:
        name:
          - samba
          - git
          - cockpit
        state: present

    - name: Disable Samba service
      ansible.builtin.systemd:
        state: stopped
        enabled: false
        name: smbd.service

    - name: Enable Cockpit service
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: cockpit.service

    - name: Download Cockpit ZFS Manager
      ansible.builtin.git:
        repo: https://github.com/optimans/cockpit-zfs-manager.git
        dest: /tmp/cockpit-zfs-manager

    - name: Copy Cockpit ZFS Manager
      ansible.builtin.copy:
        src: /tmp/cockpit-zfs-manager/zfs
        dest: /usr/share/cockpit/
        remote_src: yes

    - name: Enable Cockpit Root Login
      ansible.builtin.lineinfile:
        path: /etc/cockpit/disallowed-users
        line: '^root'
        state: absent
      notify: restart-cockpit
  when: "tools_cockpit | bool"

- name: Configure InfluxDB Metric Server
  copy:
    dest: "/etc/pve/status.cfg"
    content: |
      influxdb:
        server {{ metrics_influx_server }}
        port {{ metrics_influx_port }}
    backup: yes
  when: "metrics_influx | bool"

- name: Configure Graphite Metric Server
  copy:
    dest: "/etc/pve/status.cfg"
    content: |
      graphite:
        server {{ metrics_graphite_server }}
        port {{ metrics_graphite_port }}
    backup: yes
  when: "metrics_graphite | bool"

- name: Add Zamba LXC Toolbox
  block:
    - name: Install Prerequisites
      ansible.builtin.package:
        name:
          - git
        state: present

    - name: Download Zamba LXC Toolbox
      ansible.builtin.git:
        repo: https://github.com/bashclub/zamba-lxc-toolbox.git
        dest: "{{ tools_zamba_lxc_toolbox_path }}"
        update: yes

    - name: Copy Toolbox Config
      ansible.builtin.copy:
        src: "{{ tools_zamba_lxc_toolbox_path }}/conf/zamba.conf.example"
        dest: "{{ tools_zamba_lxc_toolbox_path }}/conf/zamba.conf"
        remote_src: yes
  when: "tools_zamba_lxc_toolbox | bool"

- name: Cleanup old Debian/PVE Kernels
  block:
    - name: Gather running Kernel
      setup:
        gather_subset:
          - "kernel"
          - "kernel_version"

    - name: Get installed Kernel versions without running Kernel
      command: dpkg --list | grep 'kernel-.*-pve' | awk '{print $2}' | grep -v "{{ ansible_kernel }}" | sort -V
      register: available_kernels

    - name: Remove old Kernel versions
      apt:
        name: "{{ available_kernels }}"
        state: absent
        purge: yes
      when: "{{ available_kernels }}"

    - name: Update GRUB
      command: /usr/sbin/update-grub
  when: "system_kernel_clean | bool"
